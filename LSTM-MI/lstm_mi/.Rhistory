library(C50)
devtools::install_github("cran/C50")
library(printr)
devtools::install_github("yihui/printr")
library(foreign)
training = read.arff("result29feature_training.txt")
training = read.arff("result29feature_training.txt")
training = read.arff("result29feature_training.txt")
training = read.arff("result29feature_training.arff")
trainindex <- createDataPartition(training$label, p=0.75, list=F)
suppressPackageStartupMessages(library(caret))
trainindex <- createDataPartition(training$label, p=0.75, list=F)
traindga <- sampledga[trainindex, fields]
traindga <- training[trainindex, fields]
fields <- c("aEntro2LD","aEntro3LD","aEntroAllDomain","psEntro2LD","psEntro3LD","psEntroAllDomain","TbMono","TvMono","PsMono","TbBi","TvBi","PsBi","TbTri","TvTri","PsTri","aLen","tvLen","psLen","aLD","tvLD","psLD","nChracter","nTLD","ratio","aFreTLD","tvFreTLD","psFreTLD")
traindga <- training[trainindex, fields]
testdga <- sampledga[-trainindex, ]
testdga <- training[-trainindex, ]
View(testdga)
View(testdga)
model <- C5.0(label ~ ., data = traindga)
library(C50)
library(printr)
model <- C5.0(label ~ ., data = traindga)
View(traindga)
View(traindga)
View(testdga)
View(testdga)
View(traindga)
View(traindga)
fields <- c("aEntro2LD","aEntro3LD","aEntroAllDomain","psEntro2LD","psEntro3LD","psEntroAllDomain","TbMono","TvMono","PsMono","TbBi","TvBi","PsBi","TbTri","TvTri","PsTri","aLen","tvLen","psLen","aLD","tvLD","psLD","nChracter","nTLD","ratio","aFreTLD","tvFreTLD","psFreTLD","label")
traindga <- training[trainindex, fields]
testdga <- training[-trainindex, ]
model <- C5.0(label ~ ., data = traindga)
View(traindga)
View(traindga)
model <- C5.0(label ~ ., data = traindga)
results <- predict(object = model, newdata = testdga, type = "label")
results <- predict(object = model, newdata = testdga, type = "class")
table(results, testdga$label)
options(max.print=999999)
table(results, testdga$label)
library(e1071)
devtools::install_github("cran/e1071")
model <- svm(label ~ ., data = traindga)
library(e1071)
library(printr)
model <- svm(label ~ ., data = traindga)
Sys.time()
Sys.time()
results <- predict(object = model, newdata = testdga, type = "class")
Sys.time()
table(results, testdga$label)
View(traindga)
installed.packages("adabag")
installed.packages('adabag')
library(dga)
install.packages('adabag')
setwd("/home/bkcs/")
sampledga<-read.csv("lstm_feature17.csv",header=FALSE)
suppressPackageStartupMessages(library(caret))
# make this repeatable
set.seed(1492)
# if we pass in a factor, it will do the stratified sampling on it.
# this will return the row numbers to include in the training data
trainindex <- createDataPartition(sampledga$V129, p=0.8, list=F)
traindga <- sampledga[trainindex,]
# going to leave all the fields in the test data
testdga <- sampledga[-trainindex, ]
model <- boosting(V129 ~ ., data = traindga)
library("adabag")
model <- boosting(V129 ~ ., data = traindga)
model <- boosting(V129 ~ ., data = traindga,boos=TRUE,
mfinal=6)
data("iris")
data(iris)
iris.adaboost <- boosting(Species~., data=iris, boos=TRUE,
mfinal=6)
View(iris)
iris.adaboost <- boosting(V129~., data=traindga, boos=TRUE,
mfinal=6)
View(traindga)
iris.adaboost <- bagging(V129~., data=traindga, boos=TRUE,
mfinal=6)
library(rpart)
iris.adaboost <- boosting(V129~., data=traindga, boos=TRUE,
mfinal=6)
df$depth[df$depth<10] <- 0
sampledga$V129[sampledga$V129 == 0]<-"geodo"
print(sampledga$V129)
iris.adaboost <- boosting(V129~., data=traindga, boos=TRUE,
mfinal=6)
model <- boosting(V129 ~ ., data = traindga,boos=TRUE,
mfinal=6,control=rpart.control(cp=0.01))
max.print(sampledga$V129)
print(sampledga$V129,max.print)
print(sampledga$V129,max)
print(sampledga$V129,max=160000)
print(sampledga$V129,max=1600000)
model <- boosting(V129 ~ ., data = traindga,boos=TRUE,
mfinal=6,control=rpart.control(cp=0.01))
model <- boosting(V129 ~ ., data = traindga,boos=TRUE, mfinal=6,control=rpart.control(cp=0.01))
source('~/.active-rstudio-document', echo=TRUE)
suppressPackageStartupMessages(library(caret))
# make this repeatable
set.seed(1492)
# if we pass in a factor, it will do the stratified sampling on it.
# this will return the row numbers to include in the training data
trainindex <- createDataPartition(sampledga, p=0.8, list=F)
suppressPackageStartupMessages(library(caret))
# make this repeatable
set.seed(1492)
# if we pass in a factor, it will do the stratified sampling on it.
# this will return the row numbers to include in the training data
trainindex <- createDataPartition(sampledga$V129, p=0.8, list=F)
model <- boosting(V129 ~ ., data = testdga,boos=TRUE, mfinal=6,control=rpart.control(cp=0.01))
fix(boosting)
model <- boosting(V129 ~ ., data = testdga,boos=TRUE, mfinal=6,control=rpart.control(cp=0))
model <- boosting(V129 ~ ., data = testdga,boos=TRUE, mfinal=6,control=rpart.control(cp=0.01))
View(boosting)
View(boosting)
write.csv(traindga,file="traindga.csv")
write.csv(testdga,file="testdga.csv")
model <- boosting(V129 ~ ., data = testdga,boos=TRUE, mfinal=6,control=rpart.control(cp=0.01))
model <- boosting(V129 ~ ., data = testdga,boos=TRUE, mfinal=6,control=rpart.control(cp=0.01))
model <- boosting(V129 ~ ., data = testdga,boos=TRUE, mfinal=6,control=rpart.control(cp=0.01))
model <- boosting(V129 ~ ., data = testdga,boos=TRUE, mfinal=6,control=rpart.control(cp=0.01))
model <- boosting(V129 ~ ., data = testdga,boos=TRUE, mfinal=6,control=rpart.control(cp=0.01))
model <- boosting(V129 ~ ., data = testdga,boos=TRUE, mfinal=6,control=rpart.control(cp=0.01))
fix(boosting)
model <- boosting(V129 ~ ., data = testdga,boos=TRUE, mfinal=6,control=rpart.control(cp=0.01))
model <- boosting(V129 ~ ., data = testdga,boos=TRUE, mfinal=6,control=rpart.control(cp=0.01))
model <- boosting(V129 ~ ., data = testdga,boos=TRUE, mfinal=6,control=rpart.control(cp=0.01))
model <- boosting(V129 ~ ., data = testdga,boos=TRUE, mfinal=6,control=rpart.control(cp=0.01))
model <- boosting(V99 ~ ., data = testdga,boos=TRUE, mfinal=6,control=rpart.control(cp=0.01))
model <- boosting(V129 ~ ., data = testdga,boos=TRUE, mfinal=6,control=rpart.control(cp=0.01))
model <- boosting(as.integer(V129) ~ ., data = testdga,boos=TRUE, mfinal=6,control=rpart.control(cp=0.01))
View(iris
)
View(testdga)
View(traindga)
model <- boosting(V129 ~ ., data = sampledga,boos=TRUE, mfinal=6,control=rpart.control(cp=0.01))
model <- boosting(V129 ~ ., data = sampledga,boos=TRUE, mfinal=6,control=rpart.control(cp=0.01))
sample1<-sampledga[1:200,]
model <- boosting(V129 ~ ., data = sample1,boos=TRUE, mfinal=6,control=rpart.control(cp=0.01))
model <- boosting(V129 ~ ., data = sample1,boos=TRUE, mfinal=6,control=rpart.control(cp=0))
model <- boosting(V129 ~ ., data = data.frame(sample1),boos=TRUE, mfinal=6,control=rpart.control(cp=0))
model <- boosting(V129 ~ ., data = sample1,boos=TRUE, mfinal=6,control=rpart.control(cp=0))
sample1<-sampledga[1:50,]
model <- boosting(V129 ~ ., data = sample1,boos=TRUE, mfinal=6,control=rpart.control(cp=0))
View(sample1)
model <- boosting(V129 ~ ., data = sample1,boos=TRUE, mfinal=2,control=rpart.control(cp=0))
model <- boosting(V129 ~ ., data = sample1,boos=TRUE, mfinal=6,control=rpart.control(cp=0))
fix(boosting)
sample1<-sampledga[1:100,]
model <- boosting(V129 ~ ., data = sample1,boos=TRUE, mfinal=6,control=rpart.control(cp=0))
View(sample1)
model <- boosting(V129 ~., data = sample1,boos=TRUE, mfinal=6,control=rpart.control(cp=0))
dim(sample1)
library(adabag)
library(C50)
model <- C5.0(V129 ~ ., data = sample1)
model <- C5.0(as.factor(V129) ~ ., data = sample1)
model <- boosting(as.factor(V129) ~., data = sample1,boos=TRUE, mfinal=6,control=rpart.control(cp=0))
sample1<-sampledga[1:50,1:128]
label<-sampledga[1:50,129]
model <- boosting(label, data = sample1,boos=TRUE, mfinal=6,control=rpart.control(cp=0))
model <- C5.0(label, sample1)
model <- C5.0(as.factor(label), sample1)
model <- C5.0(as.factor(label), data = sample1)
model <- C5.0(label, data = sample1)
model <- C5.0(sample1, label)
model <- C5.0(sample1, as.factor(label)
)
)
model <- C5.0(sample1, as.factor(label)
)
model <- boosting(sample1, label,boos=TRUE, mfinal=6,control=rpart.control(cp=0))
sample1<-sampledga[1:50,]
dga.prune<-autoprune(v129~., data=sample1)
dga.prune<-autoprune(V129~., data=sample1)
dga.prune<-autoprune(V99~., data=sample1)
fix(boosting)
model <- boosting(V99 ~., data = sample1,boos=TRUE, mfinal=6,control=rpart.control(cp=0))
model <- boosting(V129 ~., data = sample1,boos=TRUE, mfinal=6,control=rpart.control(cp=0))
sample1
model <- boosting(V59 ~., data = sample1,boos=TRUE, mfinal=6,control=rpart.control(cp=0))
sample1[20:50]<-list(NULL)
model <- boosting(V59 ~., data = sample1,boos=TRUE, mfinal=6,control=rpart.control(cp=0))
model <- boosting(V129 ~., data = sample1,boos=TRUE, mfinal=6,control=rpart.control(cp=0))
dim(sample1)
dga.bagging <- bagging(V129~., data=sample1, mfinal=10)
frsample1 = data.frame(sample1)
dga.bagging <- bagging(V129~., data=frsample1, mfinal=10)
frsample1 = rbind.data.frame(sample1)
dga.bagging <- bagging(V129~., data=frsample1, mfinal=10)
library (plyr)
fsample1 = rbind.fill(sample1)
dga.bagging <- bagging(V129~., data=frsample1, mfinal=10)
sample1 = sampledga[1:100,]
dga.bagging <- bagging(V129~., data=sample1, mfinal=10)
dga.bagging <- bagging(as.numeric(V129)~., data=frsample1, mfinal=10)
lb <- as.numeric(V129)
lb <- as.numeric(sample1$V129)
dga.bagging <- bagging(lb~., data=sample1, mfinal=10)
lb <- as.factor(sample1$V129)
dga.bagging <- bagging(lb~., data=sample1, mfinal=10)
library(adabag)
library(printr)
model <- boosting(V129 ~ ., data = traindga)
model <- boosting(V129 ~ ., data = sample1)
getwd(0)
getwd()
library(foreign)
fullData = read.csv('lstm_feature17.csv')
fullData = read.csv('lstm_feature17.csv')
View(fullData)
fields <- c("V1","V2","V3","V4","V5","V6","V7","V8","V9","V10","V11","V12","V13","V14","V15","V16","V17","V18","V19","V20","V21","V22","V23","V24","V25","V26","V27","V28","V29","V30","V31","V32","V33","V34","V35","V36","V37","V38","V39","V40","V41","V42","V43","V44","V45","V46","V47","V48","V49","V50","V51","V52","V53","V54","V55","V56","V57","V58","V59","V60","V61","V62","V63","V64","V65","V66","V67","V68","V69","V70","V71","V72","V73","V74","V75","V76","V77","V78","V79","V80","V81","V82","V83","V84","V85","V86","V87","V88","V89","V90","V91","V92","V93","V94","V95","V96","V97","V98","V99","V100","V101","V102","V103","V104","V105","V106","V107","V108","V109","V110","V111","V112","V113","V114","V115","V116","V117","V118","V119","V120","V121","V122","V123","V124","V125","V126","V127","V128","label")
trainindex <- createDataPartition(fullData, p=0.75, list=F)
trainindex <- createDataPartition(fullData$label, p=0.75, list=F)
suppressPackageStartupMessages(library(caret))
trainindex <- createDataPartition(fullData$label, p=0.75, list=F)
trainindex <- createDataPartition(fullData$label, p=0.5, list=F)
traindga <- fullData[trainindex, fields]
testdga <- fullData[-trainindex, ]
write.csv(traindga,"129training.csv")
View(testdga)
write.csv(testdga,"129testing.csv")
library(adabag)
fix(boosting)
traindga$V129 <- as.factor(traindga$V129)
model <- boosting(V129 ~ ., data = traindga, mfinal = 50)
library(C50)
model <- boosting(V129 ~ ., data = traindga, mfinal = 50)
library(adabag)
library(plyr)
model <- boosting(V129 ~ ., data = traindga, mfinal = 15)
traindga$V129 = as.factor(traindga$V129)
model <- boosting(V129 ~ ., data = traindga, mfinal = 15)
fix(boosting)
result<-predict.boosting(model,newdata = testdga)
print(result$confusion)
dim(result$confusion)
fix(boosting)
fix(boosting)
lib(c50)
library(C5.0)
library(C50)
model1<-C5.0(V129~.,traindga)
result2<-predict(model1,testdga)
str(result2)
print(result2)
confusionMatrix(result2,testdga$V129)
fix(boosting)
fix(boosting)
model <- boosting(V129 ~ ., data = traindga, mfinal = 5)
fix(boosting)
fix(boosting)
model <- boosting(V129 ~ ., data = traindga, boos = FALSE, mfinal = 5)
result<-predict(model,testdga)
result$confusion
result<-predict.boosting(model,testdga)
result$confusion
fix(boosting)
model <- boosting(V129 ~ ., data = traindga, boos = FALSE, mfinal = 5)
fix(boosting)
fix(boosting)
model <- boosting(V129 ~ ., data = traindga, boos = FALSE, mfinal = 5)
fix(boosting)
model <- boosting(V129 ~ ., data = traindga, boos = TRUE, mfinal = 5)
fix(boosting)
setwd("/home/bkcs")
setwd("/home/bkcs/dga_pedict/cost_sensitive/")
sampledga<-read.csv("traindga4.csv",header=FALSE)
class<-[]
sampledga<-data.frame(c(1:169847),sampledga)
View(sampledga)
sampledga$c.1.169847[1:88347]<-'legit'
View(sampledga)
sampledga[1:88347,0]<-'legit'
sampledga[1:88347,1]<-'legit'
View(sampledga)
sampledga[88348:169847,1]<-'dga'
write.csv(sampledga,file="traindga5.csv")
